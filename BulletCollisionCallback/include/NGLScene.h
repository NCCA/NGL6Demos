#ifndef NGLSCENE_H__
#define NGLSCENE_H__
#include "OpenGLWindow.h"
#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Transformation.h>
#include <ngl/Text.h>
#include <ngl/Obj.h>
#include <btBulletDynamicsCommon.h>
#include "Vehicle.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------
class PhysicsWorld;

class NGLScene : public OpenGLWindow
{
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene(QWindow *_parent=0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initialize();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void render();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  toggle the animation and simulation
    //----------------------------------------------------------------------------------------------------------------------
     inline void toggleAnimation(){m_animate ^=true;}
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief step the animation when in anim off mode
     //----------------------------------------------------------------------------------------------------------------------
     void stepAnimation();
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief add a cube to the simulation
     //----------------------------------------------------------------------------------------------------------------------
     void addCube();
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief add a sphere to the simulation
     //----------------------------------------------------------------------------------------------------------------------
     void addSphere();
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief add a teapot to the simulation
     //----------------------------------------------------------------------------------------------------------------------
     void addCapsule();
     void addCylinder();
     void addCone();
     typedef enum MeshType{APPLE,TEAPOT}MeshType;

     //----------------------------------------------------------------------------------------------------------------------
     /// @brief add an apple to the simulation (in honour of Newton of course!)
     //----------------------------------------------------------------------------------------------------------------------
     void addMesh(MeshType _m);
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief reset the simulation and remove all bodies
     //----------------------------------------------------------------------------------------------------------------------
     void resetSim();
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief tobble the random placement of objects when added
     //----------------------------------------------------------------------------------------------------------------------
     inline void toggleRandomPlace(){m_randomPlace^=true;}
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief toggle drawing mesh bounding boxes
     //----------------------------------------------------------------------------------------------------------------------
     inline void toggleBBox(){m_bboxDraw^=true;}
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief toggle drawing wireframe meshes
     //----------------------------------------------------------------------------------------------------------------------
     inline void toggleWireframe(){m_wireframe^=true;}
     //----------------------------------------------------------------------------------------------------------------------
     /// @brief access the physics world
     //----------------------------------------------------------------------------------------------------------------------
     inline PhysicsWorld *getPhysicsWorld(){return m_physics;}


private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the y rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief body transform matrix
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_bodyTransform;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief world / mouse transform
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_globalTransformMatrix;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the ODE physics wrapper
    //----------------------------------------------------------------------------------------------------------------------
    PhysicsWorld *m_physics;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to animate / simulate
    //----------------------------------------------------------------------------------------------------------------------
    bool m_animate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag for random placement of objects
    //----------------------------------------------------------------------------------------------------------------------
    bool m_randomPlace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag for drawing bounding boxes
    //----------------------------------------------------------------------------------------------------------------------
    bool m_bboxDraw;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag for wireframe drawing
    //----------------------------------------------------------------------------------------------------------------------
    bool m_wireframe;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the teapot mesh used for drawing
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Obj *m_teapotMesh;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the apple mesh used for drawing
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Obj *m_appleMesh;
    //----------------------------------------------------------------------------------------------------------------------
    ///@brief text for rendering
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Text *m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @briefour car
    //----------------------------------------------------------------------------------------------------------------------
    Vehicle *m_car;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when the window is re-sized
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void resizeEvent(QResizeEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when a key is pressed
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    void keyReleaseEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief
    //----------------------------------------------------------------------------------------------------------------------
    void timerEvent(QTimerEvent *);


};



#endif
