#ifndef RIGIDBODY_H__
#define RIGIDBODY_H__

#include <ode/ode.h>
#include <ngl/Vec3.h>
#include <ngl/Mat4.h>
#include <ngl/Quaternion.h>
#include "Geom.h"

//----------------------------------------------------------------------------------------------------------------------
/// @brief a basic wrapper for the ODE rigid body class
//----------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------
/// @brief
/// @param[in]
//----------------------------------------------------------------------------------------------------------------------

class RigidBody
{
  public :

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor passing in the world to connect to
    /// @param[in] _world the world the body belongs to
    //----------------------------------------------------------------------------------------------------------------------
    RigidBody(const dWorldID &_world);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor with world and initial position
    /// @param[in] _world the world the body belongs to
    /// @param[in] _pos the initial position of the body
    //----------------------------------------------------------------------------------------------------------------------
    RigidBody(const dWorldID &_world, const ngl::Vec3 &_pos);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle to enable the body
    //----------------------------------------------------------------------------------------------------------------------
    inline void enable(){dBodyEnable(m_id);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle to disable the world
    //----------------------------------------------------------------------------------------------------------------------
    inline void disable(){dBodyDisable(m_id);}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the mass of the body
    /// @param[in] _m a dMass ode mass object
    //----------------------------------------------------------------------------------------------------------------------
    void setMass(const dMass &_m);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the mass of the object
    /// @returns a dMass object stored for the object
    //----------------------------------------------------------------------------------------------------------------------
    dMass getMass() const ;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor
    //----------------------------------------------------------------------------------------------------------------------
    ~RigidBody();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the mesh transform, this is used when we have a mesh object
    /// calls dGeomTriMeshSetLastTransform for mesh - mesh collision caches and speed
    /// read the docs for more info
    //----------------------------------------------------------------------------------------------------------------------
    void setMeshTransfomation();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the position of the body from a vec3
    /// @param[in] _p the position to set.
    //----------------------------------------------------------------------------------------------------------------------
    void setPosition(const ngl::Vec3 &_p);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the rotation from a Mat4
    /// @param[in] _r the rotation matrix
    //----------------------------------------------------------------------------------------------------------------------
    void setRotation(const ngl::Mat4 &_r);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the rotation from a Quaternion
    /// @param[in] _q the input quat
    //----------------------------------------------------------------------------------------------------------------------
    void setQuaternion(const ngl::Quaternion &_q);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the linear velocity from a Vec3
    /// @param[in] _v the velocity of the body
    //----------------------------------------------------------------------------------------------------------------------
    void setLinearVelocity(const ngl::Vec3 &_v);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set linear velocity from x,y,z same as above
    /// @param[in] _x the x velocity
    /// @param[in] _y the y velocity
    /// @param[in] _z the z velocity
    //----------------------------------------------------------------------------------------------------------------------
    void setLinearVelocity(float _x, float _y, float _z);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the angular velocity of the body from a Vec3
    /// @param[in] _v the x,y,z velocities
    //----------------------------------------------------------------------------------------------------------------------
    void setAngularVelocity(const ngl::Vec3 &_v);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the force from a Vec2
    /// @param[in] _f the force to set
    //----------------------------------------------------------------------------------------------------------------------
    void setForce(const ngl::Vec3 &_f);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the tourqe as a Vec3
    /// @param[in] _t the tourqe to set
    //----------------------------------------------------------------------------------------------------------------------
    void setTorque(const ngl::Vec3 &_t);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the transform of the body as a Mat4
    /// @returns the transformation as a Mat4
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 getTransformMatrix() const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accesor to get the body force
    /// @returns the bodies force as a Vec3
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 getForce() const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the tourqe as a Vec3
    /// @returns the tourqe
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 getTorque() const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the bodies position as a Vec3
    /// @returns the position
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 getPosition()const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the rotation as a Mat4 rotation matrix
    /// @returns the rotation of the body
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 getRotation()const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the rotation of the body as a Quat
    /// @returns the rotation of the body as a quat
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Quaternion getQuaternion()const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the current linear velocity
    /// @returns the velocity as a Vec3
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 getLinearVelocity()const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the angular velocity of the object
    /// @returns the current angular velocity as a Vec3
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 getAngularVelocity()const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the name of the body, this is used to differentiate different mesh
    /// objects as we can see what we have by name
    /// @param[in] _n the name to set for the body
    //----------------------------------------------------------------------------------------------------------------------
    inline void setName(const std::string &_n){m_name=_n;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accesor for the name of the body
    /// @returns the name
    //----------------------------------------------------------------------------------------------------------------------
    inline std::string getName() const {return m_name;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add another force to the body
    /// @param[in] _f the force to add
    //----------------------------------------------------------------------------------------------------------------------
    void addForce(const ngl::Vec3 &_f);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add another tourqe to the body
    /// @param[in] _t the tourqe to add
    //----------------------------------------------------------------------------------------------------------------------
    void addTorque(const ngl::Vec3 &_t);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add a relative force to the body
    /// @param[in] _f the force to add
    //----------------------------------------------------------------------------------------------------------------------
    void addRelativeForce(const ngl::Vec3 &_f);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add a relative Tourqe to the body
    /// @param[in] _t the tourqe to add
    //----------------------------------------------------------------------------------------------------------------------
    void addRelativeTorque(const ngl::Vec3 &_t);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add a force at a position
    /// @param[in] _f the force to add
    /// @param[in] _p the position of the force
    //----------------------------------------------------------------------------------------------------------------------
    void addForceAtPosition(const ngl::Vec3 &_f,const ngl::Vec3 &_p);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add a force at a relative position
    /// @param[in] _f the force to add
    /// @param[in] _p the position of the force
    //----------------------------------------------------------------------------------------------------------------------
    void addForceAtRelativePosition(const ngl::Vec3 &_f,const ngl::Vec3 &_p);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add a relative force at a position
    /// @param[in] _f the force to add
    /// @param[in] _p the position of the force
    //----------------------------------------------------------------------------------------------------------------------
    void addRelativeForceAtPosition(const ngl::Vec3 &_f,const ngl::Vec3 &_p);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add a relative force at a relative position
    /// @param[in] _f the force to add
    /// @param[in] _p the position of the force
    //----------------------------------------------------------------------------------------------------------------------
    void addRelativeForceAtRelativePosition(const ngl::Vec3 &_f,const ngl::Vec3 &_p);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add some geometry for the body
    /// @param[in] _g a geometry object
    //----------------------------------------------------------------------------------------------------------------------
    void addGeom(Geom &_g);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get what type of geometry this object has
    /// @returns what type of geo this object has
    //----------------------------------------------------------------------------------------------------------------------
    GEOTYPES getGeoType() const {return m_type;}

  private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the id of this body
    //----------------------------------------------------------------------------------------------------------------------
    dBodyID m_id;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the world the body is attatched to
    //----------------------------------------------------------------------------------------------------------------------
    dWorldID m_world;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the geometry object attatched to this object
    //----------------------------------------------------------------------------------------------------------------------
    Geom m_geom;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief what type of body it is (see enums above)
    //----------------------------------------------------------------------------------------------------------------------
    GEOTYPES m_type;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the name of this body
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_name;
};


#endif
