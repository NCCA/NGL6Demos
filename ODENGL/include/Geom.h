#ifndef GEOM_H__
#define GEOM_H__
#include <ode/ode.h>
#include <ngl/Vec4.h>
#include <ngl/Obj.h>

//----------------------------------------------------------------------------------------------------------------------
/// @brief enums for the geometry types
//----------------------------------------------------------------------------------------------------------------------
enum GEOTYPES{SPHERE,BOX,PLANE,CYLINDER,RAY,TRIANGLEMESH,GEOTRANSFORM};

//----------------------------------------------------------------------------------------------------------------------
/// @class Geom
/// @brief this class encapsulates the ODE geometry creation and
/// update routines, each rigid body will have one of these
//----------------------------------------------------------------------------------------------------------------------
class Geom
{
  public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor passing in the space the geo belongs to
    //----------------------------------------------------------------------------------------------------------------------
    Geom(const dSpaceID _space);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor default ctor
    //----------------------------------------------------------------------------------------------------------------------
    Geom(){;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create geometry as a sphere
    /// @param[in] _r the radius of the sphere
    //----------------------------------------------------------------------------------------------------------------------
    void createSphere(ngl::Real _r);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create geometry as a box
    /// @param[in] _b the x,y,z values correspond to the w,h,d of the box
    //----------------------------------------------------------------------------------------------------------------------
    void createBox(ngl::Vec3 _b);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create geometry as a box passing in w,h,d
    /// @param[in] _lx the length of x
    /// @param[in] _ly the length of y
    /// @param[in] _lz the length of z
    //----------------------------------------------------------------------------------------------------------------------
    void createBox(ngl::Real _lx, ngl::Real _ly, ngl::Real _lz);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create a plane the vec4 encapsulates the normal and w the depth
    /// @param[in] _p the normal / w values for the box
    //----------------------------------------------------------------------------------------------------------------------
    void createPlane(ngl::Vec4 _p);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create a plane passing in individual values for the plane
    /// @param[in] _a the normal in x
    /// @param[in] _b the normal in y
    /// @param[in] _c the nornal in z
    /// @param[in] _d the depth value
    //----------------------------------------------------------------------------------------------------------------------
    void createPlane(ngl::Real _a, ngl::Real _b, ngl::Real _c,ngl::Real _d);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create geo as a cylinder
    /// @param[in] _r the radius
    /// @param[in] _l the length of the cylinder
    //----------------------------------------------------------------------------------------------------------------------

    void createCylinder(ngl::Real _r, ngl::Real _l);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create a ray
    /// @param[in] _l the lenght of the ray
    //----------------------------------------------------------------------------------------------------------------------
    void createRay(ngl::Real _l);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create a mesh geometrt this basically looks it up in the mesh class by name
    /// @param[in] _name the name of the mesh to find
    //----------------------------------------------------------------------------------------------------------------------
    void createMesh(const std::string &_name);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the geo ID
    /// @returns the id of the geo
    //----------------------------------------------------------------------------------------------------------------------
    inline dGeomID getID() const {return m_id;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the geometry type
    /// @returns the current geo type enum call this when drawing to find what we have
    //----------------------------------------------------------------------------------------------------------------------
    inline GEOTYPES getType() const {return m_type;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the can set the offset of the center of mass of the geo
    /// @param[in] _x x position of the offset of mass
    /// @param[in] _y y position of the offset of mass
    /// @param[in] _z z position of the offset of mass
    //----------------------------------------------------------------------------------------------------------------------
    void setOffsetPosition(float _x, float _y, float _z);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor
    //----------------------------------------------------------------------------------------------------------------------
    ~Geom();
  private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief id of the geometry
    //----------------------------------------------------------------------------------------------------------------------
    dGeomID m_id;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the space that the geo belongs to
    //----------------------------------------------------------------------------------------------------------------------
    dSpaceID m_space;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief what type of geometry it is
    //----------------------------------------------------------------------------------------------------------------------
    GEOTYPES m_type;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this will be set if we have a mesh attached to the object
    //----------------------------------------------------------------------------------------------------------------------
    dTriMeshDataID m_meshID;
};



#endif
