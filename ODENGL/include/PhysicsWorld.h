#ifndef PHYSICSWORLD_H__
#define PHYSICSWORLD_H__

//----------------------------------------------------------------------------------------------------------------------
/// @brief this is a minimal Facade wrapper for the code here
/// http://www.ode.org/ode-latest-userguide.html#sec_5_0_0
/// ideally you would create your own with more access etc
/// note as the collide function needs to be static several class
/// attributes are also static, the collide method is also in a different
/// source module to make it easier to write your own
//----------------------------------------------------------------------------------------------------------------------

#include <vector>
#include <ode/ode.h>
#include <ngl/Vec3.h>
#include <RigidBody.h>

class PhysicsWorld
{
  public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enum for the collision type on creation
    //----------------------------------------------------------------------------------------------------------------------
    enum SPACE{SIMPLE,HASH,QUAD};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor, this should really be a singleton as we have quite a few static members and only one world
    //----------------------------------------------------------------------------------------------------------------------
    PhysicsWorld(SPACE _s=HASH);
    //----------------------------------------------------------------------------------------------------------------------
    // @brief this will create a QUAD space only world
    //----------------------------------------------------------------------------------------------------------------------
    PhysicsWorld(ngl::Vec3 _center,ngl::Vec3 _extents, int _depth=4);
    //----------------------------------------------------------------------------------------------------------------------
    // @brief dtor
    //----------------------------------------------------------------------------------------------------------------------
    ~PhysicsWorld();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the gravity in our world
    /// @param[in] _g the x,y,z components of gravity
    //----------------------------------------------------------------------------------------------------------------------
    void setGravity(const ngl::Vec3 &_g);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the current gravity value
    /// @returns g the gravity
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::Vec3 getGravity()const {return m_gravity;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief step the simulation by _size time steps
    /// @param _size the size of the step to take this will be slow but accurate (read ODE docs)
    //----------------------------------------------------------------------------------------------------------------------
    void step(ngl::Real _size);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief step the simulation by _size time steps
    /// @param _size the size of the step to take this will be quick but less accurate (read ODE docs)
    //----------------------------------------------------------------------------------------------------------------------
    void quickStep(ngl::Real _size);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief reset the simulation (remove all geo etc)
    //----------------------------------------------------------------------------------------------------------------------
    void reset();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief wrapper for  dCreatePlane (dSpaceID space,
    /// @param _normal stores the data used as dReal a, dReal b, dReal c, dReal d
    void createGroundPlane(ngl::Vec4 _normal);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the id of the world
    /// @returns the world id
    //----------------------------------------------------------------------------------------------------------------------
    inline dWorldID getWorld()const {return m_world;}
    //----------------------------------------------------------------------------------------------------------------------
    ///  @brief add a rigid body to the world
    /// @param _b the body to add
    //----------------------------------------------------------------------------------------------------------------------
    void addBody(const RigidBody _b);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the collision function this needs to be static as it is
    /// passed as a callback to the ode function. There is no easy way to wrap this so
    /// it is best to leave it static, any class attributes required in this function must also
    /// be made static. This is actually implemented in a different source file as this is the
    /// one function we may need to change several times
    /// @param *_data the data to return from this function
    /// @param _o1 the first geo to check
    /// @param _o2 the second geo to check
    //----------------------------------------------------------------------------------------------------------------------
    static void collide(void *_data, dGeomID _o1, dGeomID _o2);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the linear damping
    /// @param [in] _v the value to set for damping
    //----------------------------------------------------------------------------------------------------------------------
    void setWorldLinearDamping(ngl::Real _v);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the angular damping
    /// @param [in] _v the value to set for damping
    //----------------------------------------------------------------------------------------------------------------------
    void setWorldAngularDamping(ngl::Real _v);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the max angular speed
    /// @param [in] _v the value to set for speed
    //----------------------------------------------------------------------------------------------------------------------
    void setWorldMaxAngularSpeed(ngl::Real _v);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief set the max correcting velocity
    /// @param [in] _v the value to set for velocity
    //----------------------------------------------------------------------------------------------------------------------
    void setWorldContactMaxCorrectingVelocity(ngl::Real _v);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this sets the contact surface layer defaults to 0 so
    /// if you set it to a smaller value it will stop jitter
    /// @param [in] _v the value to set for the layer
    //----------------------------------------------------------------------------------------------------------------------
    void setWorldContactSurfaceLayer(ngl::Real _v);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief add a force to all bodies
    /// @param [in] _f the force to add
    //----------------------------------------------------------------------------------------------------------------------
    void addForceToAllBodies(ngl::Vec3 _f);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the space for the world at present there is only one space
    /// really we need to create multiple spaces etc but this is not
    /// implemented yet.
    /// @return the space
    //----------------------------------------------------------------------------------------------------------------------
    inline dSpaceID getSpace() const {return m_space;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to do the collision detection call this every frame
    //----------------------------------------------------------------------------------------------------------------------
    void doCollisions();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief const iterator to the begining of the bodies list
    //----------------------------------------------------------------------------------------------------------------------
    inline std::vector <RigidBody>::const_iterator begin() const {return m_bodies.begin(); }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief const iterator to the end of the bodies list
    //----------------------------------------------------------------------------------------------------------------------
    inline std::vector <RigidBody>::const_iterator end() const {return m_bodies.end(); }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  iterator to the begining of the bodies list
    //----------------------------------------------------------------------------------------------------------------------
    inline std::vector <RigidBody>::iterator begin() {return m_bodies.begin(); }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief  iterator to the end of the bodies list
    //----------------------------------------------------------------------------------------------------------------------
    inline std::vector <RigidBody>::iterator end()  {return m_bodies.end(); }

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this sets the max contacts for the collisions
    //----------------------------------------------------------------------------------------------------------------------
    void setMaxContacts(int _c);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this get how many contacts we are using
    //----------------------------------------------------------------------------------------------------------------------
    inline int getMaxContacts() const{return m_maxContacts;}

  private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the contacts are used in the collision, this is allocated in the ctor to 8
    /// but will be re-set when setMaxContacts is called.
    //----------------------------------------------------------------------------------------------------------------------
    static dContact *m_contact;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the id of the world this is used in the collision routine so
    /// we need to make it static
    //----------------------------------------------------------------------------------------------------------------------
    static dWorldID m_world;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the id of the space this needs to be static as used in the collision
    /// routines
    //----------------------------------------------------------------------------------------------------------------------
    static dSpaceID m_space;
    //----------------------------------------------------------------------------------------------------------------------
    ///  @brief what type of space we are using
    //----------------------------------------------------------------------------------------------------------------------
    SPACE m_spaceType;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the contact group for collisions this needs to be static
    /// as it is used in the collision routines
    //----------------------------------------------------------------------------------------------------------------------
    static dJointGroupID m_contactgroup;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief max contact to check in collisions, this need to be static as it is used in the
    /// collision routines
    //----------------------------------------------------------------------------------------------------------------------
    static int m_maxContacts;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the world gravity value
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_gravity;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the ground plane normal
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec4 m_gpNormal;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the list of the rigid bodies in the world
    //----------------------------------------------------------------------------------------------------------------------
    std::vector <RigidBody> m_bodies;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the id of the world ground plane
    //----------------------------------------------------------------------------------------------------------------------
    dGeomID m_groundPlaneID;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the linear damping set to default values but needed for reset
    //----------------------------------------------------------------------------------------------------------------------
    float m_linearDamping;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the angular damping set to default values but needed for reset
    //----------------------------------------------------------------------------------------------------------------------
    float m_angularDamping;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the max angular speed set to default values but needed for reset
    //----------------------------------------------------------------------------------------------------------------------
    float m_maxAngularSpeed;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the max correcting velocity set to default values but needed for reset
    //----------------------------------------------------------------------------------------------------------------------
    float m_maxCorrectVelocity;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief contact surface layers set to default values but needed for reset
    //----------------------------------------------------------------------------------------------------------------------
    float m_contactSurfaceLayer;


};

#endif

