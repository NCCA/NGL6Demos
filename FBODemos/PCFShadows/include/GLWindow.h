#ifndef GLWINDOW_H__
#define GLWINDOW_H__


#include <ngl/Camera.h>
#include <ngl/Transformation.h>
#include <ngl/Light.h>
#include <ngl/Text.h>
#include <QEvent>
#include <QResizeEvent>
#include <QTime>
#include <QGLWidget>
//----------------------------------------------------------------------------------------------------------------------
/// @file GLWindow.h
/// @brief a basic Qt GL window class for ngl demos
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/10/10
/// Revision History :
/// Initial Version 10/10/10 (Binary day ;-0 )
/// @class GLWindow
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------
class GLWindow : public QGLWidget
{
Q_OBJECT        // must include this if you use Qt signals/slots
public :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor for GLWindow
  /// @param [in] _parent the parent window to create the GL context in
  //----------------------------------------------------------------------------------------------------------------------
  GLWindow(const QGLFormat _format,QWidget *_parent );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor
  //----------------------------------------------------------------------------------------------------------------------
  ~GLWindow();

public slots :
  inline void setDebugQuad(bool _t){m_drawDebugQuad=_t;}
  void changeTextureSize(int _i);
  void changeTextureMinFilter(int _i);
  void changeTextureMagFilter(int _i);

  inline void setZNear(double _v){m_zNear=float(_v);}
  inline void setZFar(double _v){m_zfar=float(_v);}
  inline void setFOV(int _v){m_fov=float(_v);  }
  inline void changeLightYPos(double _dy){m_lightYPos=_dy;}
  inline void changeLightZOffset(double _dz){m_lightZoffset=_dz;}
  inline void changeLightXOffset(double _dx){m_lightXoffset=_dx;}
  inline void changePolygonOffsetFactor(double _f){m_polyOffsetFactor=_f;}
  inline void changePolygonOffsetScale(double _s){m_polyOffsetFactor=_s;}
  inline void setAnimation(bool _t){m_animate =_t;}

  void setColour();

private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the x rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinXFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the y rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinYFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_rotate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the Right mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_translate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origY;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value for Position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origXPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value for Position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origYPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the global mouse transforms
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_mouseGlobalTX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Our Camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera *m_cam;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief camera from light view
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera *m_lightCamera;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief transformation stack for the gl transformations etc
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Transformation m_transform;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the model position for mouse movement
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_modelPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief timer id for the animation timer
  //----------------------------------------------------------------------------------------------------------------------
  int m_lightTimer;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if were animating the light
  //----------------------------------------------------------------------------------------------------------------------
  bool m_animate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the angle of the light updated when the timer triggers to make it rotate
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Real m_lightAngle;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the position of the light passed to the camera for the shadow mapping
  //----------------------------------------------------------------------------------------------------------------------

  ngl::Vec3 m_lightPosition;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief our texture id used by the FBO
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_textureID;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief our FBO id used by the FBO
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_fboID;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief screen width
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_width;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief screen height
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_height;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief y pos of the light
  //----------------------------------------------------------------------------------------------------------------------
  GLfloat m_lightYPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief x offset of the light
  //----------------------------------------------------------------------------------------------------------------------
  GLfloat m_lightXoffset;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief z offset of the light
  //----------------------------------------------------------------------------------------------------------------------
  GLfloat m_lightZoffset;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief text for debug
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Text *m_text;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to draw debug quad
  //----------------------------------------------------------------------------------------------------------------------
  bool m_drawDebugQuad;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief size of the texture
  //----------------------------------------------------------------------------------------------------------------------
  GLuint m_textureSize;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief near clipping plane
  //----------------------------------------------------------------------------------------------------------------------
  GLfloat m_zNear;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief far clipping plane
  //----------------------------------------------------------------------------------------------------------------------
  GLfloat m_zfar;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief light fov
  //----------------------------------------------------------------------------------------------------------------------
  GLfloat m_fov;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief texture min filter value
  //----------------------------------------------------------------------------------------------------------------------
  GLint m_textureMinFilter;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief texture Mag filter values
  //----------------------------------------------------------------------------------------------------------------------
  GLint m_textureMagFilter;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief polygon offset factor
  //----------------------------------------------------------------------------------------------------------------------
  GLfloat m_polyOffsetFactor;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief polygon offset scale
  //----------------------------------------------------------------------------------------------------------------------
  GLfloat m_polyOffsetScale;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief material colour
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Colour m_colour;

protected:

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  The following methods must be implimented in the sub class
  /// this is called when the window is created
  //----------------------------------------------------------------------------------------------------------------------
  void initializeGL();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this is called whenever the window is re-sized
  /// @param[in] _w the width of the resized window
  /// @param[in] _h the height of the resized window
  //----------------------------------------------------------------------------------------------------------------------
  void resizeGL(
                const int _w,
                const int _h
               );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this is the main gl drawing routine which is called whenever the window needs to be re-drawn
  //----------------------------------------------------------------------------------------------------------------------
  void paintGL();

private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called every time a mouse is moved
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent (
                       QMouseEvent * _event
                      );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is pressed
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent (
                        QMouseEvent *_event
                       );

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is released
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseReleaseEvent (
                          QMouseEvent *_event
                         );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief called when the timer is triggered
  //----------------------------------------------------------------------------------------------------------------------
  void timerEvent(
                    QTimerEvent *_event
                   );
  //----------------------------------------------------------------------------------------------------------------------
  // @brief this method is called everytime the mouse wheel is moved inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void wheelEvent(
                                                                         QWheelEvent *_event
                                                                 );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief a method to update the light
  //----------------------------------------------------------------------------------------------------------------------
  void updateLight();


  //----------------------------------------------------------------------------------------------------------------------
  /// @brief define a type to pass a class method to a function
  /// this code is adapted from
  /// http://www.parashift.com/c++-faq-lite/pointers-to-members.html
  //----------------------------------------------------------------------------------------------------------------------
  typedef void (GLWindow::*funcPointer)();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief define a type to pass a class method to a function
  /// this code is adapted from
  /// http://www.parashift.com/c++-faq-lite/pointers-to-members.html
  #define CALLMEMBERFUNC(object,ptrToMember)  ((object).*(ptrToMember))
  //----------------------------------------------------------------------------------------------------------------------

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief draw our scene passing in the shader to use
  /// @param[in] _shader the name of the shader to use when drawing
  /// @param[in] _shaderFunc the function to load values to the shader
  //----------------------------------------------------------------------------------------------------------------------
  void drawScene(
                  funcPointer _shaderFunc
                 );

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief load all the transform values to the shader
  /// @param[in] _tx the current transform to load
  //----------------------------------------------------------------------------------------------------------------------
  void loadMatricesToShadowShader();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief load all the transform values to the shader from light POV
  /// @param[in] _tx the current transform to load
  //----------------------------------------------------------------------------------------------------------------------
  void loadToLightPOVShader( );
  void debugTexture(float _t, float _b, float _l, float _r);
  void createFramebufferObject();




};

#endif
