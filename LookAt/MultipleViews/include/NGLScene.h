#ifndef NGLSCENE_H__
#define NGLSCENE_H__
#include "OpenGLWindow.h"
#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Text.h>
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------

class NGLScene : public OpenGLWindow
{
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene(QWindow *_parent=0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initialize();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void render();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief toggle full / panel screen
    //----------------------------------------------------------------------------------------------------------------------
    void toggleWindow();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief frame in the active window
    //----------------------------------------------------------------------------------------------------------------------
    void frameActive();
private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enums for the current window
    //----------------------------------------------------------------------------------------------------------------------
    enum WINDOW{TOP,FRONT,SIDE,PERSP,ALL};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief enum to indicate if we are in full screen or panel mode for drawing
    //----------------------------------------------------------------------------------------------------------------------
    enum MODE{FULLSCREEN,PANEL};
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this structure is used to store mouse info for each windwo
    /// there will be one each plus a fullscreen one
    //----------------------------------------------------------------------------------------------------------------------

    typedef struct MouseInfo
    {
      ngl::Vec3 m_modelPos; ///  @brief model position
      int m_spinXFace;  /// @brief x rotation
      int m_spinYFace; /// @brief y rotation
      int m_origX; /// @brief original x rot
      int m_origY; /// @brief original y rot
      int m_origXPos; /// @brief original x pos
      int m_origYPos; /// @brief original y pos
      bool m_rotate; /// @brief flag to indicate if rotate is active
      bool m_translate; /// @brief flag to indicate if trans is active
    }m;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief array of mouse info
    //----------------------------------------------------------------------------------------------------------------------
    MouseInfo m_panelMouseInfo[5];
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief which is the current active window
    //----------------------------------------------------------------------------------------------------------------------
    WINDOW m_activeWindow;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the top
    /// @param[in] _m the mode to draw the window
    //----------------------------------------------------------------------------------------------------------------------
    void top(MODE _m=PANEL);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the front
    /// @param[in] _m the mode to draw the window
    //----------------------------------------------------------------------------------------------------------------------
    void front(MODE _m=PANEL);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the side
    /// @param[in] _m the mode to draw the window
    //----------------------------------------------------------------------------------------------------------------------
    void side(MODE _m=PANEL);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw the perspective
    /// @param[in] _m the mode to draw the window
    //----------------------------------------------------------------------------------------------------------------------
    void persp(MODE _m=PANEL);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief get the quadrant the window is in
    //----------------------------------------------------------------------------------------------------------------------
    WINDOW getActiveQuadrant()const;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current mouse x position
    //----------------------------------------------------------------------------------------------------------------------
    int m_mouseX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief current mouse y position
    //----------------------------------------------------------------------------------------------------------------------
    int m_mouseY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief screen width
    //----------------------------------------------------------------------------------------------------------------------
    int m_width;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief screen height
    //----------------------------------------------------------------------------------------------------------------------
    int m_height;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our view matrix
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_view;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our projection matrix
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_projection;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when the window is re-sized
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void resizeEvent(QResizeEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when a key is pressed
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);


};



#endif
